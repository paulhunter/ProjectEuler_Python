'''
Project Euler Problem 29: Distinct Powers

Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

Notes:
Seems pretty straight forward. With the use of a dictionary this is easy to brute force. 
'''

import time

def main():
	t = time.clock()
	print "Answer: %d." % len(findDistinctPrimes(100,100))
	print "Time Taken: %0.3f seconds." % (time.clock()-t)

def findDistinctPrimes(a,b):
	coms = [(x,y) for x in range(2,a+1) for y in range(2,b+1)]
	terms = dict()

	for x,y in coms:
		terms[x**y] = True

	return terms.keys()

if __name__ == '__main__':
	main()