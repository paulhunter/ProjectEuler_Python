'''
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

notes:
If we create an inverse function which we can use to check if a number is a pentagon number then
we can generate pentagon numbers and check it against each pentagon number before it, doing it in this
order ensures that we minimize D as needed. 
'''

import time
import math

def main():
	t = time.clock()
	result = 0
	found = False
	n = 1
	while(found != True):
		n += 1
		p = n * (3*n-1)/2
		#check pentas in reverse order to minimize the difference
		for i in range(n-1,0,-1):
			#r is always smaller than p
			r = i * (3*i-1)/2
			if isPenta(p+r) and isPenta(p-r):
				result = p-r
				found = True
				break

	print "Answer: %d" % result
	print "Time Taken: %0.3f seconds" % (time.clock()-t)

#The inverse of the Penta Number function, easy check if a number is penta. 
def isPenta(val):
	f = (math.sqrt(1 + 24*val) + 1) / 6
	return f == int(f)

if __name__ == '__main__':
	main()
